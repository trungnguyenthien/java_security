package vn.trungnguyen;

import vn.trungnguyen.helper.AsymmetricHelper;
import vn.trungnguyen.helper.SymmetricHelper;
import vn.trungnguyen.helper.RandomHelper;

import javax.crypto.SecretKey;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        System.out.println("üöÄ SAMPLE SymmetricHelper");
        try {
            SymmetricHelper helper = new SymmetricHelper();

            // 1. T·∫°o kh√≥a
            SecretKey key = helper.generateKey();
            System.out.println("Kh√≥a (Base64): " + helper.keyToBase64(key));

            // 2. M√£ h√≥a
            String plaintext = "Xin ch√†o, ƒë√¢y l√† tin nh·∫Øn b√≠ m·∫≠t!";
            String encrypted = helper.encrypt(plaintext, key);
            System.out.println("B·∫£n r√µ: " + plaintext);
            System.out.println("ƒê√£ m√£ h√≥a: " + encrypted);

            // 3. Gi·∫£i m√£
            String decrypted = helper.decrypt(encrypted, key);
            System.out.println("Sau gi·∫£i m√£: " + decrypted);

            // Ki·ªÉm tra
            System.out.println("Kh·ªõp v·ªõi b·∫£n g·ªëc: " + plaintext.equals(decrypted));

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("\nüöÄ SAMPLE AsymmetricHelper");
        try {
            // Kh·ªüi t·∫°o AsymmetricHelper
            AsymmetricHelper helper = new AsymmetricHelper();
            AsymmetricHelper.Encryption encryption = new AsymmetricHelper.Encryption();
            AsymmetricHelper.Signature signature = new AsymmetricHelper.Signature();

            // 1. T·∫°o c·∫∑p kh√≥a cho m√£ h√≥a (ECDH)
            AsymmetricHelper.KeyPair encryptionKeyPair = encryption.generateKeyPair();

            // 2. T·∫°o c·∫∑p kh√≥a cho ch·ªØ k√Ω (Ed25519)
            AsymmetricHelper.KeyPair signatureKeyPair = signature.generateKeyPair();

            // 3. D·ªØ li·ªáu m·∫´u
            String originalData = "Xin ch√†o, ƒë√¢y l√† d·ªØ li·ªáu b√≠ m·∫≠t c·∫ßn m√£ h√≥a v√† k√Ω!";
            System.out.println("D·ªØ li·ªáu g·ªëc: " + originalData);

            // 4. M√£ h√≥a d·ªØ li·ªáu
            AsymmetricHelper.EncryptedResult encryptedResult = encryption.encrypt(originalData, encryptionKeyPair.getPublicBase64());
            String encryptedData = encryptedResult.getEncryptedData();
            String ephemeralPublicKey = encryptedResult.getEphemeralPublicKey();
            System.out.println("D·ªØ li·ªáu m√£ h√≥a (Base64): " + encryptedData);
            System.out.println("Kh√≥a c√¥ng khai t·∫°m th·ªùi (Base64): " + ephemeralPublicKey);

            // 5. Gi·∫£i m√£ d·ªØ li·ªáu
            String decryptedData = encryption.decrypt(encryptedData, encryptionKeyPair.getPrivateBase64(), ephemeralPublicKey);
            System.out.println("D·ªØ li·ªáu gi·∫£i m√£: " + decryptedData);
            System.out.println("Kh·ªõp v·ªõi b·∫£n g·ªëc: " + originalData.equals(decryptedData));

            // 6. K√Ω d·ªØ li·ªáu
            String signedData = signature.sign(originalData, signatureKeyPair.getPrivateBase64());
            System.out.println("Ch·ªØ k√Ω (Base64): " + signedData);

            // 7. X√°c minh ch·ªØ k√Ω
            boolean isVerified = signature.verify(originalData, signedData, signatureKeyPair.getPublicBase64());
            System.out.println("Ch·ªØ k√Ω h·ª£p l·ªá: " + isVerified);

            // 8. Ki·ªÉm tra x√°c minh v·ªõi d·ªØ li·ªáu sai
            String wrongData = "D·ªØ li·ªáu sai l·ªách!";
            boolean isVerifiedWrong = signature.verify(wrongData, signedData, signatureKeyPair.getPublicBase64());
            System.out.println("X√°c minh v·ªõi d·ªØ li·ªáu sai: " + isVerifiedWrong);

        } catch (Exception e) {
            System.err.println("L·ªói x·∫£y ra: " + e.getMessage());
            e.printStackTrace();
        }

        System.out.println("\nüöÄ SAMPLE RandomHelper");
        try {
            // 1. Random bytes
            byte[] randomBytes = RandomHelper.nextBytes(16);
            System.out.println("Random bytes (16): " + Arrays.toString(randomBytes));

            // 2. Random int trong kho·∫£ng [0, bound)
            int randomInt = RandomHelper.nextInt(100);
            System.out.println("Random int [0,100): " + randomInt);

            // 3. Random int trong kho·∫£ng [origin, bound)
            int randomIntRange = RandomHelper.nextInt(50, 60);
            System.out.println("Random int [50,60): " + randomIntRange);

            // 4. Random long trong kho·∫£ng [0, bound)
            long randomLong = RandomHelper.nextLong(1000L);
            System.out.println("Random long [0,1000): " + randomLong);

            // 5. Random long trong kho·∫£ng [origin, bound)
            long randomLongRange = RandomHelper.nextLong(500L, 600L);
            System.out.println("Random long [500,600): " + randomLongRange);

            // 6. Random double [0.0,1.0)
            double randomDouble = RandomHelper.nextDouble();
            System.out.println("Random double [0,1): " + randomDouble);

            // 7. Random double trong kho·∫£ng [origin, bound)
            double randomDoubleRange = RandomHelper.nextDouble(5.5, 9.9);
            System.out.println("Random double [5.5,9.9): " + randomDoubleRange);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
